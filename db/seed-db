#!/usr/local/bin/node
const fs = require("fs");
const { promisify } = require("util");
const { Client } = require("pg");
const { process } = require("process")

const readFile = promisify(fs.readFile)

const main = async () => {
    console.log("connecting...");
    const client = new Client({
        user: "zachs",
        host: "localhost",
        database: "kanjibenkyo"
    });
    client.connect();
    await seedKana(client);
    await seedKanji(client);
    await seedUsers(client);
    client.end();
    console.log("finished!");
}

const seedKana = async (client) => {
    const kanaData = await readFile("kana.csv", "utf-8");
    const allKana = parseCsv(kanaData);

    console.log("dropping kana...");
    await client.query("TRUNCATE kana");

    console.log("seeding kana...");
    for (const kana of allKana) {
        await client.query(
            "INSERT INTO kana VALUES (nextval('kana_id_seq'), $1, $2, $3)",
            kana.slice(0, 3)
        );
    }
}

const seedKanji = async (client) => {
    const kanjiData = await readFile("kanji.json", "utf-8");
    const allKanji = JSON.parse(kanjiData);

    console.log("dropping kanji...");
    await client.query("TRUNCATE kanji");

    console.log("seeding kanji...");
    for (const kanji of allKanji) {
        await client.query(
            "INSERT INTO kanji VALUES (nextval('kanji_id_seq'), $1, $2, $3, $4, $5, $6, $7, $8)",
            [
                charize(kanji.kanji),
                kanji.strokes,
                kanji.onyomi,
                kanji.kunyomi,
                splitMeaning(kanji.meaning),
                convertGrade(kanji.grade),
                charize(kanji.radical),
                []
            ]
        );
    }
}

const seedUsers = async (client) => {
    const users = [{
        name: "guest",
        email: "guest@kanjibenkyo.com",
        password_digest: "",
        experience: 0
    },
    {
        name: "guest2",
        email: "guest2@kanjibenkyo.com",
        password_digest: "",
        experience: 0
    }]

    console.log("dropping users...");
    await client.query("TRUNCATE users");

    console.log("seeding users...");
    for (const user of users) {
        await client.query(
            "INSERT INTO users VALUES (nextval('users_id_seq'), $1, $2, $3, $4)",
            [
                user.name,
                user.email,
                user.password_digest,
                user.experience
            ]
        )
    }
}

const splitMeaning = meanings =>
    meanings.split(",").map(meaning => meaning.trim())

const charize = (character) => {
    if (character.length > 1) {
        console.log(`converted ${character} to ${character[0]}`)
    } else {
        // console.log(character[0])
    }
    // process.stdout.write("hello")
    return character[0]
}

const convertGrade = grade =>
    (grade === "S" ? "-1" : grade)

const parseCsv = (csvData) => {
    const rows = csvData.split("\n").map(row => row.split(","));
    rows.shift(); // remove headers
    return rows;
}

main();